---
apiVersion: v1
kind: Service
metadata:
  labels:
    k8s-app: elasticsearch
  name: elasticsearch
spec:
  selector:
    k8s-app: elasticsearch
  type: ClusterIP
  ports:
    - port: 9200
      protocol: TCP
      targetPort: db

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch
  labels:
    k8s-app: elasticsearch
spec:
  serviceName: elasticsearch
  replicas: 1
  selector:
    matchLabels:
      k8s-app: elasticsearch
  template:
    metadata:
      labels:
        k8s-app: elasticsearch
    spec:
      terminationGracePeriodSeconds: 300
      securityContext:
        #runAsUser: 1000
        #runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: elasticsearch
          image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.4.2
          env:
            - name: "NAMESPACE"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: ES_JAVA_OPTS
              value: "-Xms512m -Xmx512m"
             # https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-health.html#request-params wait_for_status
            - name: ES_CLUSTER_HEALTH_CHECK_PARAMS
              #value: "wait_for_status=green&timeout=1s"
              value: "wait_for_status=yellow&timeout=5s"
          ports:
            - containerPort: 9200
              name: db
              protocol: TCP
            - containerPort: 9300
              name: transport
              protocol: TCP
          resources:
            # need more cpu upon initialization, therefore burstable class
            requests:
              cpu: 1000m
              memory: 1Gi
            limits:
              cpu: 1000m
              memory: 1Gi
          livenessProbe:
            httpGet:
              port: db
              path: /_cluster/health
            initialDelaySeconds: 30
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 3
            timeoutSeconds: 5
            exec:
              command:
                - sh
                - -c
                - |
                  #!/usr/bin/env bash -e
                  # If the node is starting up wait for the cluster to be ready (request params: '${ES_CLUSTER_HEALTH_CHECK_PARAMS}' )
                  # Once it has started only check that the node itself is responding
                  #
                  # https://github.com/elastic/helm-charts/blob/master/elasticsearch/templates/statefulset.yaml#L195
                  START_FILE=/tmp/.es_start_file

                  http () {
                      local path="${1}"
                      if [ -n "${ELASTIC_USERNAME}" ] && [ -n "${ELASTIC_PASSWORD}" ]; then
                        BASIC_AUTH="-u ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}"
                      else
unts:
            - name: elasticsearchdata
              mountPath: /usr/share/elasticsearch/data
      initContainers:
        # Elasticsearch requires vm.max_map_count to be at least 262144.
        # If your OS already sets up this number to a higher value, feel free
        # to remove this init container.
        - image: alpine:3.6
          command: ["/sbin/sysctl", "-w", "vm.max_map_count=262144"]
          name: elasticsearch-logging-init
          securityContext:
            privileged: true

                        BASIC_AUTH=''
                      fi
                      curl -XGET -s -k --fail ${BASIC_AUTH} http://127.0.0.1:9200${path}
                  }

                  if [ -f "${START_FILE}" ]; then
                      echo "Elasticsearch is already running, lets check the node is healthy and there are master nodes available"
                      http "/_cluster/health?timeout=0s"
                  else
                      echo "Waiting for elasticsearch cluster to become cluster to be ready (request params: \"${ES_CLUSTER_HEALTH_CHECK_PARAMS}\" )"
                      if http "/_cluster/health?${ES_CLUSTER_HEALTH_CHECK_PARAMS}" ; then
                          touch ${START_FILE}
                          exit 0
                      else
                          echo "Cluster is not yet ready (request params: \"${ES_CLUSTER_HEALTH_CHECK_PARAMS}\" )"
                          exit 1
                      fi
